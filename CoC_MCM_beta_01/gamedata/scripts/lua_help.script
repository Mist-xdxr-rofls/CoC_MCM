
class client_spawn_manager {
    function remove(number, number)
    function add(number, number, const function<void>&, object)
    function add(number, number, const function<void>&)
}


C++ class CUIMessageBoxEx : CUIDialogWnd {
    CUIMessageBoxEx ();
    
    function HideDialog();

    function InitMessageBox(string);

    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function SetText(string);

    function SetAutoDelete(boolean);

    function GetPassword();

    function AttachChild(CUIWindow*);

    function GetHost();

    function SetWndPos(vector2);

    function ShowDialog(boolean);

    function Enable(boolean);

    function DetachChild(CUIWindow*);

    function SetPPMode();

    function WindowName();

    function IsShown();

    function GetHolder();

    function SetWndRect(Frect);

    function GetHeight() const;

    function ResetPPMode();

    function GetWidth() const;

    function IsEnabled();

    function SetWndSize(vector2);

    function Show(boolean);

    function IsAutoDelete();

};


C++ class CUIScriptWnd : CUIDialogWnd,DLL_Pure {
    CUIScriptWnd ();
    
    function HideDialog();

    function _construct();

    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function OnKeyboard(number, enum EUIMessages);

    function Update();

    function AddCallback(string, number, const function<void>&, object);

    function SetAutoDelete(boolean);

    function Dispatch(number, number);

    function Show(boolean);

    function AttachChild(CUIWindow*);

    function Register(CUIWindow*, string);

    function SetWndPos(vector2);

    function ShowDialog(boolean);

    function Enable(boolean);

    function DetachChild(CUIWindow*);

    function SetPPMode();

    function WindowName();

    function IsShown();

    function GetHolder();

    function SetWndRect(Frect);

    function GetHeight() const;

    function ResetPPMode();

    function GetWidth() const;

    function IsEnabled();

    function SetWndSize(vector2);

    function Load(string);

    function IsAutoDelete();

};


C++ class CUIEditBox : CUICustomEdit {
    CUIEditBox ();
    
    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function SetText(string);

    function SetNextFocusCapturer(CUICustomEdit*);

    function GetText();

    function SetAutoDelete(boolean);

    function AttachChild(CUIWindow*);

    function SetWndPos(vector2);

    function GetWidth() const;

    function SetPPMode();

    function DetachChild(CUIWindow*);

    function CaptureFocus(boolean);

    function WindowName();

    function IsShown();

    function Enable(boolean);

    function SetWndRect(Frect);

    function GetHeight() const;

    function ResetPPMode();

    function InitTexture(string);

    function IsEnabled();

    function SetWndSize(vector2);

    function Show(boolean);

    function IsAutoDelete();

};


namespace  {
    function game_ini();
    function bit_and(number, number);
    function GetFontGraffiti32Russian();
    function device();
    function cast_planner(action_base*);
    function IsGameTypeSingle();
    function game_graph();
    function dik_to_bind(number);
    function render_get_dx_level();
    function GetFontGraffiti19Russian();
    function sell_condition(ini_file*, string);
    function sell_condition(number, number);
    function buy_condition(ini_file*, string);
    function buy_condition(number, number);
    function create_ini_file(string);
    function get_hud();
    function GetFontSmall();
    function error_log(string);
    function GetFontLetterica18Russian();
    function command_line();
    function getFS();
    function valid_saved_game(string);
    function get_console();
    function GetFontGraffiti50Russian();
    function app_ready();
    function IsDynamicMusic();
    function GetFontDI();
    function GetFontLetterica16Russian();
    function log(string);
    function show_condition(ini_file*, string);
    function IsImportantSave();
    function GetFontLetterica25();
    function system_ini();
	--Alundaio: START
	function reload_system_ini();        -- Reloads system_ini. Can be done in-game
	--Alundaio: END
    function GetFontMedium();
    function alife();
    function flush();
    function editor();
    function bit_or(number, number);
    function GetFontGraffiti22Russian();
    function prefetch(string);
    function time_global();
    function verify_if_thread_is_running();
    function script_server_object_version();
    function bit_not(number);
    function ef_storage();
    function GetARGB(number, number, number, number);
    function user_name();
    function bit_xor(number, number);

C++ class CUIEditBoxEx : CUICustomEdit {
    CUIEditBoxEx ();
    
    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function SetText(string);

    function SetNextFocusCapturer(CUICustomEdit*);

    function GetText();

    function SetAutoDelete(boolean);

    function AttachChild(CUIWindow*);

    function SetWndPos(vector2);

    function GetWidth() const;

    function SetPPMode();

    function DetachChild(CUIWindow*);

    function CaptureFocus(boolean);

    function WindowName();

    function IsShown();

    function Enable(boolean);

    function SetWndRect(Frect);

    function GetHeight() const;

    function ResetPPMode();

    function InitTexture(string);

    function IsEnabled();

    function SetWndSize(vector2);

    function Show(boolean);

    function IsAutoDelete();

};


C++ class CUI3tButton : CUIButton {
    CUI3tButton ();
    
    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function TextControl();

    function SetAutoDelete(boolean);

    function Enable(boolean);

    function AttachChild(CUIWindow*);

    function GetTextureRect();

    function SetWndPos(vector2);

    function SetWndSize(vector2);

    function SetWndRect(Frect);

    function DetachChild(CUIWindow*);

    function SetPPMode();

    function WindowName();

    function IsShown();

    function SetTextureRect(Frect*);

    function Show(boolean);

    function GetHeight() const;

    function GetWidth() const;

    function InitTexture(string);

    function IsEnabled();

    function ResetPPMode();

    function SetStretchTexture(boolean);

    function IsAutoDelete();

};


C++ class CUIMessageBox : CUIStatic {
    CUIMessageBox ();
    
    function InitMessageBox(string);

    function SetWindowName(string);

    function GetWndPos(CUIWindow*);

    function SetText(string);

    function TextControl();

    function SetAutoDelete(boolean);

    function GetPassword();

    function GetHost();

    function SetStretchTexture(boolean);

    function AttachChild(CUIWindow*);

    function Enable(boolean);

    function SetTextureRect(Frect*);

    function ResetPPMode();

    function Show(boolean);

    function DetachChild(CUIWindow*);

    function SetPPMode();

    function WindowName();

    function IsShown();

    function SetWndPos(vector2);

    function SetWndRect(Frect);

    function GetHeight() const;

    function GetWidth() const;

    function InitTexture(string);

    function IsEnabled();

    function SetWndSize(vector2);

    function GetTextureRect();

    function IsAutoDelete();

};

C++ class CScriptXmlInit {
    CScriptXmlInit ();
    
    function InitSpinText(string, CUIWindow*);

    function InitTab(string, CUIWindow*);

    function InitStatic(string, CUIWindow*);

    function InitSleepStatic(string, CUIWindow*);

    function InitTextWnd(string, CUIWindow*);

    function InitSpinFlt(string, CUIWindow*);

    function InitProgressBar(string, CUIWindow*);

    function InitSpinNum(string, CUIWindow*);

    function InitMapList(string, CUIWindow*);

    function ParseFile(string);

    function InitCDkey(string, CUIWindow*);

    function InitListBox(string, CUIWindow*);

    function InitKeyBinding(string, CUIWindow*);

    function InitMMShniaga(string, CUIWindow*);

    function InitWindow(string, number, CUIWindow*);

    function InitEditBox(string, CUIWindow*);

    function InitCheck(string, CUIWindow*);

    function InitScrollView(string, CUIWindow*);

    function InitMPPlayerName(string, CUIWindow*);

    function InitTrackBar(string, CUIWindow*);

    function InitMapInfo(string, CUIWindow*);

    function InitServerList(string, CUIWindow*);

    function InitComboBox(string, CUIWindow*);

    function InitFrameLine(string, CUIWindow*);

    function Init3tButton(string, CUIWindow*);

    function InitAnimStatic(string, CUIWindow*);

    function InitFrame(string, CUIWindow*);

};

class CConsole {
    function execute_script(string)
    function get_string(string)
    function execute(string)
    function get_bool(CConsole*, string)
    function get_float(CConsole*, string)
    function get_integer(CConsole*, string)
    function execute_deferred(CConsole*, string)
    function get_token(string)
    function show()
    function hide()
}

class CController : CGameObject {
    CController ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CCustomOutfit : CGameObject {
	CCustomOutfit()

	property bIsHelmetAvaliable
	property bIsBackpackAvaliable
	property m_additional_weight
	property m_additional_weight2
	property m_fBleedingRestoreSpeed
	property m_fHealthRestoreSpeed
	property m_fPowerLoss
	property m_fPowerRestoreSpeed
	property m_fRadiationRestoreSpeed
	property m_fSatietyRestoreSpeed

	function _construct()
	function BonePassBullet(number)
	function get_HitFracActor()
	function get_artefact_count() const
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function use(CGameObject*)
	function Visual() const
	function GetDefHitTypeProtection(number)
	function GetHitTypeProtection(number, string)
	function GetBoneArmor(number)
}

class cover_point {
    function level_vertex_id() const
    function is_smart_cover(const cover_point*)
    function position() const
}

class danger_object {
    const attack_sound = 1
    const attacked = 5
    const bullet_ricochet = 0
    const enemy_sound = 7
    const entity_attacked = 2
    const entity_corpse = 4
    const entity_death = 3
    const grenade = 6
    const hit = 2
    const sound = 1
    const visual = 0
	
	operator ==(const danger_object&, danger_object)
	
    function type() const
    function time() const
    function position(const danger_object*)
    function object(const danger_object*)
    function perceive_type() const
    function dependent_object(const danger_object*)
}

class CDestroyablePhysicsObject : CGameObject {
    CDestroyablePhysicsObject ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CDialogHolder {
    function RemoveDialogToRender(CUIWindow*)
    function AddDialogToRender(CUIWindow*)
}

class CPhraseScript {
    function SetScriptText(string)
    function AddHasInfo(string)
    function AddGiveInfo(string)
    function AddDisableInfo(string)
    function AddDontHasInfo(string)
    function AddAction(string)
    function AddPrecondition(string)
}

class CDummyArtefact : CArtefact {
    CDummyArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class cef_storage {
    function evaluate(cef_storage*, string, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*, game_object*)
    function evaluate(cef_storage*, string, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*, cse_alife_object*)
}

class CEatableItem : CInventoryItem {
	property m_bRemoveAfterUse
	property m_fWeightEmpty
	property m_fWeightFull

	function ActivateItem()
	function CanDelete() const
	function CanStack() const
	function CanTake() const
	function Cost() const
	function DeactivateItem()
	function Empty() const
	function GetCondition() const
	function GetDropManual() const
	function GetIconName() const
	function GetMaxUses()
	function GetRemainingUses() const
	function HandDependence() const
	function has_any_upgrades()
	function install_upgrade(string)
	function IsQuestItem() const
	function IsUsingCondition() const
	function ItemDescription()
	function NameItem()
	function NameShort()
	function pre_install_upgrade()
	function SetCondition(number)
	function SetDropManual(number)
	function SetRemainingUses(number)
	function SetWeight(number)
	function Useful() const
	function verify_upgrade(string)
	function Weight() const
}

class CElectricBall : CArtefact {
    CElectricBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class explosive {
    function explode()
}

class CExplosiveItem : CGameObject {
    CExplosiveItem ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CF1 : CGameObject {
    CF1 ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CFadedBall : CArtefact {
    CFadedBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CFoodItem : CGameObject {
    CFoodItem ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CFracture : CGameObject {
    CFracture ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CGalantineArtefact : CArtefact {
    CGalantineArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CGameFont {
    const alCenter = 2
    const alLeft = 0
    const alRight = 1
}

class CGameGraph {
    function valid_vertex_id(number) const
    function vertex(number) const
    function accessible(const CGameGraph*, const number&)
    function accessible(const CGameGraph*, const number&, boolean)
    function levels(const CGameGraph*)
    function vertex_id(const GameGraph__CVertex*) const
}

class CGameObject : DLL_Pure,ISheduled,ICollidable,IRenderable {
    CGameObject ()
	
    function Visual() const
    function getEnabled() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Export(net_packet&)
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CGameTask {
    CGameTask ()
	
    function get_id()
    function set_priority(number)
    function set_title(string)
    function set_map_hint(string)
    function get_title()
    function add_on_fail_info(string)
    function add_complete_func(string)
    function add_fail_func(string)
    function remove_map_locations(boolean)
    function add_fail_info(string)
    function add_complete_info(string)
    function set_type(number)
    function set_map_object_id(number)
    function set_description(string)
    function set_id(string)
    function add_on_fail_func(string)
    function add_on_complete_func(string)
    function set_icon_name(string)
    function set_map_location(string)
    function change_map_location(string, number)
    function add_on_complete_info(string)
    function get_priority()
}

class CGraviArtefact : CArtefact {
    CGraviArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CGrenadeLauncher : CGameObject {
    CGrenadeLauncher ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CHairsZone : CGameObject {
    CHairsZone ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class hanging_lamp : CGameObject {
    hanging_lamp ()
	
	function Visual() const
    function getEnabled() const
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function turn_on()
    function turn_off()
    function net_Export(net_packet&)
    function _construct()
    function use(CGameObject*)
}

class CHelicopter : CGameObject {
    const eAlive = 0
    const eBodyByPath = 0
    const eBodyToPoint = 1
    const eDead = 1
    const eEnemyEntity = 2
    const eEnemyNone = 0
    const eEnemyPoint = 1
    const eMovLanding = 4
    const eMovNone = 0
    const eMovPatrolPath = 2
    const eMovRoundPath = 3
    const eMovTakeOff = 5
    const eMovToPoint = 1
	
    property m_dead
    property m_exploded
    property m_flame_started
    property m_light_started
    property m_max_mgun_dist
    property m_max_rocket_dist
    property m_min_mgun_dist
    property m_min_rocket_dist
    property m_syncronize_rocket
    property m_time_between_rocket_attack
    property m_use_mgun_on_attack
    property m_use_rocket_on_attack
	
    CHelicopter ()
	
    function _construct()
    function SetSpeedInDestPoint(number)
    function getVisible() const
    function LookAtPoint(vector, boolean)
    function GetRealAltitude()
    function GetCurrVelocity()
    function SetLinearAcc(number, number)
    function GoPatrolByPatrolPath(string, number)
    function GetSpeedInDestPoint(number)
    function isVisible(game_object*)
    function net_Import(net_packet&)
    function SetMaxVelocity(number)
    function SetfHealth(number)
    function GetMovementState()
    function SetEnemy(game_object*)
    function SetEnemy(vector*)
    function getEnabled() const
    function GetfHealth() const
    function Explode()
    function SetOnPointRangeDist(number)
    function SetFireTrailLength(number)
    function GetOnPointRangeDist()
    function GetMaxVelocity()
    function TurnLighting(boolean)
    function SetBarrelDirTolerance(number)
    function GetBodyState()
    function GetCurrVelocityVec()
    function net_Export(net_packet&)
    function SetDestPosition(vector*)
    function UseFireTrail()
    function UseFireTrail(boolean)
    function GoPatrolByRoundPath(vector, number, boolean)
    function net_Spawn(cse_abstract*)
    function GetState()
    function Die()
    function StartFlame()
    function Visual() const
    function GetDistanceToDestPosition()
    function GetHuntState()
    function TurnEngineSound(boolean)
    function GetSafeAltitude()
    function ClearEnemy()
    function use(CGameObject*)
}

class CHelmet : CGameObject {
	property m_fPowerLoss
	property m_fHealthRestoreSpeed
	property m_fRadiationRestoreSpeed
	property m_fSatietyRestoreSpeed
	property m_fPowerRestoreSpeed
	property m_fBleedingRestoreSpeed

	CHelmet()

	function _construct()
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function use(CGameObject*)
	function Visual() const
	function get_HitFracActor()
	function GetDefHitTypeProtection(number)
	function GetHitTypeProtection(number, string)
	function GetBoneArmor(number)
}

class holder {
    function engaged()
    function Action(number, number)
    function SetParam(number, vector)
}

class CInventoryBox : CGameObject {
    CInventoryBox ()
	
    function _construct()
	function can_take() const
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function set_can_take(boolean)
	function set_closed(boolean, string)
	function use(CGameObject*)
	function Visual() const
}

class CInventoryItem {

}

class CInventoryOwner() {
	function IconName()
	function get_money()
	function EnableTalk()
	function DisableTalk()
	function IsTalkEnabled()
	function EnableTrade()
	function DisableTrade()
	function IsTradeEnabled()
	function EnableInvUpgrade()
	function DisableInvUpgrade()
	function IsInvUpgradeEnabled()
	function GetTalkPartner()
	function OfferTalk(CInventoryOwner*)
	function StartTalk(CInventoryOwner*, boolean)
	function StopTalk()
	function IsTalking()
	function deadbody_can_take(boolean)
	function deadbody_can_take_status()
	function deadbody_closed(boolean)
	function deadbody_closed_status()
}
	
class CLevelChanger : CGameObject {
    CLevelChanger ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class FS {
    const FS_ClampExt = 4
    const FS_ListFiles = 1
    const FS_ListFolders = 2
    const FS_RootOnly = 8
    const FS_sort_by_modif_down = 5
    const FS_sort_by_modif_up = 4
    const FS_sort_by_name_down = 1
    const FS_sort_by_name_up = 0
    const FS_sort_by_size_down = 3
    const FS_sort_by_size_up = 2
	
    function get_file_age(string)
    function file_length(string)
    function file_rename(string, string, boolean)
    function r_open(string, string)
    function r_open(string)
    function append_path(string, string, string, number)
    function file_copy(string, string)
    function get_file_age_str(FS*, string)
    function dir_delete(FS*, string, number)
    function dir_delete(FS*, string, string, number)
    function update_path(FS*, string, string)
    function r_close(reader*&)
    function exist(string)
    function exist(string, string)
    function w_close(class IWriter*&)
    function file_list_open(FS*, string, number)
    function file_list_open(FS*, string, string, number)
    function path_exist(string)
    function file_list_open_ex(FS*, string, number, string)
    function get_path(string)
    function file_delete(string, string)
    function file_delete(string)
    function w_open(string, string)
    function w_open(string)
	function rescan_path(FS*, string)
	function rescan_pathes(FS*)
	
}

class CMainMenu {
    function GetCDKey()
    function GetAccountMngr()
    function GetDemoInfo(string)
    function GetPatchProgress()
    function GetProfileStore()
    function GetGSVer()
    function CancelDownload()
    function GetLoginMngr()
    function ValidateCDKey()
    function GetPlayerName()
}

class CMedkit : CGameObject {
    CMedkit ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CMercuryBall : CArtefact {
    CMercuryBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CMincer : CGameObject {
    CMincer ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CMosquitoBald : CGameObject {
    CMosquitoBald ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class object_factory {
    function register(string, string, string, string)
    function register(string, string, string)
}

class particle_params {
    particle_params ()
    particle_params (const vector&)
    particle_params (const vector&, const vector&)
    particle_params (const vector&, const vector&, const vector&)
}

class patrol {
    const continue = 1
    const custom = 3
    const dummy = -1
    const nearest = 2
    const next = 4
    const start = 0
    const stop = 0
	
    patrol (string)
    patrol (string, enum PatrolPathManager::EPatrolStartType)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean, number)
	
    function level_vertex_id(number) const
    function point(const patrol*, number)
    function flag(number, number) const
    function game_vertex_id(number) const
    function flags(number) const
    function name(number) const
    function index(string) const
    function terminal(number) const
    function count() const
    function get_nearest(const vector&) const
}

class CPda : CGameObject {
    CPda ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPhrase {
    function GetPhraseScript()
}

class CPhraseDialog {
    function AddPhrase(string, string, string, number)
}

class CPhysicObject : CGameObject {
    CPhysicObject ()
	
    function set_door_ignore_dynamics()
    function _construct()
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function play_bones_sound()
    function run_anim_back()
    function net_Export(net_packet&)
    function Visual() const
    function unset_door_ignore_dynamics()
    function net_Import(net_packet&)
    function run_anim_forward()
    function stop_anim()
    function anim_time_get()
    function getEnabled() const
    function anim_time_set(number)
    function stop_bones_sound()
    function use(CGameObject*)
}

class CPoltergeist : CGameObject {
    CPoltergeist ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class property_storage {
    property_storage ()
    function property(const number&) const
    function set_property(const number&, const boolean&)
}

class CPseudoGigant : CGameObject {
    CPseudoGigant ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPsyDog : CGameObject {
    CPsyDog ()
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPsyDogPhantom : CGameObject {
    CPsyDogPhantom ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class cpure_server_object : ipure_server_object {
}

class CRGD5 : CGameObject {
    CRGD5 ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CRadioactiveZone : CGameObject {
    CRadioactiveZone ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class render_device {
    property aspect_ratio
    property cam_dir
    property cam_pos
    property cam_right
    property cam_top
    property f_time_delta
    property fov
    property frame
    property height
    property precache_frame
    property time_delta
    property width
	
    function time_global(const render_device*)
    function is_paused(render_device*)
    function pause(render_device*, boolean)
}

class CRustyHairArtefact : CArtefact {
    CRustyHairArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class cse_anomalous_zone : cse_custom_zone {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_anomalous_zone (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_car : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_car (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_creature_abstract : cse_alife_dynamic_object_visual {
    property angle
    property group
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_creature_abstract (string)
	
    function on_death(cse_abstract*)
    function on_before_register()
    function use_ai_locations(boolean)
    function interactive() const
    function on_register()
    function alive() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_team()
    function switch_offline()
    function health() const
    function g_group()
    function clsid() const
    function g_squad()
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_creature_actor : cse_alife_creature_abstract,cse_alife_trader_abstract,cse_ph_skeleton {
    property angle
    property group
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_creature_actor (string)
	
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function g_squad()
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function profile_name(cse_alife_trader_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function used_ai_locations() const
    function use_ai_locations(boolean)
    function switch_online()
    function visible_for_map() const
    function visible_for_map(boolean)
    function alive() const
    function community() const
    function interactive() const
    function on_register()
    function on_before_register()
    function reputation()
    function on_unregister()
    function g_team()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function health() const
    function move_offline() const
    function move_offline(boolean)
    function on_spawn()
    function UPDATE_Write(net_packet&)
    function g_group()
    function rank()
}

class cse_alife_creature_crow : cse_alife_creature_abstract {
    property angle
    property group
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_creature_crow (string)
	
    function on_death(cse_abstract*)
    function on_before_register()
    function use_ai_locations(boolean)
    function UPDATE_Read(net_packet&)
    function on_register()
    function on_unregister()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_team()
    function switch_offline()
    function alive() const
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function clsid() const
    function on_spawn()
    function name(const cse_abstract*)
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function g_squad()
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function interactive() const
    function can_save() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function g_group()
    function health() const
}

class cse_alife_creature_phantom : cse_alife_creature_abstract {
    property angle
    property group
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_creature_phantom (string)
	
    function on_death(cse_abstract*)
    function on_before_register()
    function use_ai_locations(boolean)
    function UPDATE_Read(net_packet&)
    function on_register()
    function on_unregister()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_team()
    function switch_offline()
    function alive() const
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function clsid() const
    function on_spawn()
    function name(const cse_abstract*)
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function g_squad()
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function interactive() const
    function can_save() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function g_group()
    function health() const
}

class cse_custom_zone : cse_alife_dynamic_object,cse_shape {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_custom_zone (string)
	
    function move_offline() const
    function move_offline(boolean)
    function use_ai_locations(boolean)
    function switch_online()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_before_register()
    function STATE_Write(net_packet&)
    function on_register()
    function init()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function on_spawn()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function can_save() const
}

class cse_alife_dynamic_object : cse_alife_object {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_dynamic_object (string)
	
    function used_ai_locations() const
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function switch_online()
    function keep_saved_data_anyway() const
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function on_register()
    function on_before_register()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function on_spawn()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function name(const cse_abstract*)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_dynamic_object_visual : cse_alife_dynamic_object,cse_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_dynamic_object_visual (string)
	
    function move_offline() const
    function move_offline(boolean)
    function use_ai_locations(boolean)
    function switch_online()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_before_register()
    function STATE_Write(net_packet&)
    function on_register()
    function init()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function on_spawn()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function can_save() const
}

class cse_alife_graph_point : cse_abstract {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    cse_alife_graph_point (string)
	
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function clsid() const
}

class cse_alife_group_abstract {
}

class cse_alife_helicopter : cse_alife_dynamic_object_visual,cse_motion,cse_ph_skeleton {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_helicopter (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_human_abstract : cse_alife_trader_abstract,cse_alife_monster_abstract {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_human_abstract (string)
	
    function kill()
    function can_save() const
    function update()
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function g_squad()
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function profile_name(cse_alife_trader_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function set_rank(number)
    function use_ai_locations(boolean)
    function g_group()
    function switch_online()
    function brain(cse_alife_monster_abstract*)
    function brain(cse_alife_human_abstract*)
    function on_spawn()
    function visible_for_map() const
    function visible_for_map(boolean)
    function move_offline() const
    function move_offline(boolean)
    function alive() const
    function health() const
    function STATE_Read(net_packet&, number)
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function used_ai_locations() const
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function has_detector()
    function g_team()
    function on_register()
    function reputation()
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function on_before_register()
    function smart_terrain_id(cse_alife_monster_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function interactive() const
    function community() const
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function rank()
}

class cse_alife_human_stalker : cse_alife_human_abstract,cse_ph_skeleton {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_human_stalker (string)
	
    function kill()
    function can_save() const
    function brain(cse_alife_monster_abstract*)
    function brain(cse_alife_human_abstract*)
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function g_squad()
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function profile_name(cse_alife_trader_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function move_offline() const
    function move_offline(boolean)
    function switch_online()
    function use_ai_locations(boolean)
    function on_unregister()
    function set_rank(number)
    function used_ai_locations() const
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function visible_for_map() const
    function visible_for_map(boolean)
    function community() const
    function alive() const
    function interactive() const
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function smart_terrain_id(cse_alife_monster_abstract*)
    function has_detector()
    function on_before_register()
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function reputation()
    function on_register()
    function g_team()
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function health() const
    function update()
    function on_spawn()
    function UPDATE_Write(net_packet&)
    function g_group()
    function rank()
}

class cse_alife_inventory_box : cse_alife_dynamic_object_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_inventory_box (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_inventory_item 

class cse_alife_item : cse_alife_dynamic_object_visual,cse_alife_inventory_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function bfUseful()
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_item_ammo : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_ammo (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_artefact : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_artefact (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_bolt : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_bolt (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_custom_outfit : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_custom_outfit (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_detector : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_detector (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_document : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_document (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_explosive : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_explosive (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_grenade : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_grenade (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_pda : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_pda (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_torch : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_torch (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function switch_online()
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_weapon : cse_alife_item {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_weapon (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function switch_online()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function clone_addons(cse_alife_item_weapon*)
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function move_offline() const
    function move_offline(boolean)
}

class cse_alife_item_weapon_auto_shotgun : cse_alife_item_weapon {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_weapon_auto_shotgun (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function switch_offline()
    function move_offline() const
    function move_offline(boolean)
    function clsid() const
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_online()
    function clone_addons(cse_alife_item_weapon*)
    function STATE_Write(net_packet&)
    function keep_saved_data_anyway() const
    function init()
    function used_ai_locations() const
    function interactive() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function on_register()
}

class cse_alife_item_weapon_magazined : cse_alife_item_weapon {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_weapon_magazined (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function switch_offline()
    function move_offline() const
    function move_offline(boolean)
    function clsid() const
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_online()
    function clone_addons(cse_alife_item_weapon*)
    function STATE_Write(net_packet&)
    function keep_saved_data_anyway() const
    function init()
    function used_ai_locations() const
    function interactive() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function on_register()
}

class cse_alife_item_weapon_magazined_w_gl : cse_alife_item_weapon_magazined {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_weapon_magazined_w_gl (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function switch_online()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function on_register()
    function clsid() const
    function can_save() const
    function used_ai_locations() const
    function clone_addons(cse_alife_item_weapon*)
    function STATE_Write(net_packet&)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function init()
    function on_spawn()
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function move_offline() const
    function move_offline(boolean)
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_item_weapon_shotgun : cse_alife_item_weapon {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_item_weapon_shotgun (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function switch_offline()
    function move_offline() const
    function move_offline(boolean)
    function clsid() const
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_online()
    function clone_addons(cse_alife_item_weapon*)
    function STATE_Write(net_packet&)
    function keep_saved_data_anyway() const
    function init()
    function used_ai_locations() const
    function interactive() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function bfUseful()
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function on_register()
}

class cse_alife_level_changer : cse_alife_space_restrictor {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_level_changer (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_monster_abstract : cse_alife_creature_abstract,cse_alife_schedulable {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_monster_abstract (string)
	
    function kill()
    function can_save() const
    function update()
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function g_squad()
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function used_ai_locations() const
    function use_ai_locations(boolean)
    function switch_online()
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function visible_for_map() const
    function visible_for_map(boolean)
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function alive() const
    function interactive() const
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function brain(cse_alife_monster_abstract*)
    function has_detector()
    function smart_terrain_id(cse_alife_monster_abstract*)
    function on_before_register()
    function on_unregister()
    function on_register()
    function g_team()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function health() const
    function move_offline() const
    function move_offline(boolean)
    function on_spawn()
    function UPDATE_Write(net_packet&)
    function g_group()
    function rank()
}

class cse_alife_monster_base : cse_alife_monster_abstract,cse_ph_skeleton {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_monster_base (string)
	
    function kill()
    function can_save() const
    function brain(cse_alife_monster_abstract*)
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function smart_terrain_id(cse_alife_monster_abstract*)
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function use_ai_locations(boolean)
    function switch_online()
    function on_before_register()
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_group()
    function alive() const
    function g_squad()
    function on_spawn()
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function move_offline() const
    function move_offline(boolean)
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function health() const
    function has_detector()
    function STATE_Read(net_packet&, number)
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function g_team()
    function on_register()
    function used_ai_locations() const
    function o_torso(cse_alife_creature_abstract*)
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function interactive() const
    function update()
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function rank()
}

class cse_alife_monster_rat : cse_alife_monster_abstract,cse_alife_inventory_item {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_monster_rat (string)
	
    function kill()
    function can_save() const
    function brain(cse_alife_monster_abstract*)
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function smart_terrain_id(cse_alife_monster_abstract*)
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function use_ai_locations(boolean)
    function switch_online()
    function on_before_register()
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_group()
    function alive() const
    function g_squad()
    function on_spawn()
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function move_offline() const
    function move_offline(boolean)
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function health() const
    function has_detector()
    function STATE_Read(net_packet&, number)
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function g_team()
    function on_register()
    function used_ai_locations() const
    function o_torso(cse_alife_creature_abstract*)
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function interactive() const
    function update()
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function rank()
}

class cse_alife_monster_zombie : cse_alife_monster_abstract {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_monster_zombie (string)
	
    function kill()
    function can_save() const
    function brain(cse_alife_monster_abstract*)
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function smart_terrain_id(cse_alife_monster_abstract*)
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function use_ai_locations(boolean)
    function switch_online()
    function on_before_register()
    function visible_for_map() const
    function visible_for_map(boolean)
    function g_group()
    function alive() const
    function g_squad()
    function on_spawn()
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function move_offline() const
    function move_offline(boolean)
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function health() const
    function has_detector()
    function STATE_Read(net_packet&, number)
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function g_team()
    function on_register()
    function used_ai_locations() const
    function o_torso(cse_alife_creature_abstract*)
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function interactive() const
    function update()
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function rank()
}

class cse_alife_mounted_weapon : cse_alife_dynamic_object_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_mounted_weapon (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_object : cse_abstract {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_object (string)
	
    function used_ai_locations() const
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function STATE_Read(net_packet&, number)
    function interactive() const
    function visible_for_map() const
    function visible_for_map(boolean)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function name(const cse_abstract*)
}

class cse_alife_object_breakable : cse_alife_dynamic_object_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_object_breakable (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_object_climable : cse_shape,cse_abstract {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    cse_alife_object_climable (string)
	
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function clsid() const
}

class cse_alife_object_hanging_lamp : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_object_hanging_lamp (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_object_physic : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_object_physic (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_object_projector : cse_alife_dynamic_object_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_object_projector (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_online_offline_group : cse_alife_dynamic_object,cse_alife_schedulable {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_online_offline_group (string)
	
    function can_save() const
    function update()
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function switch_offline()
    function clsid() const
    function register_member(number)
    function STATE_Write(net_packet&)
    function init()
    function clear_location_types()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function get_current_task()
    function commander_id()
    function used_ai_locations() const
    function use_ai_locations(boolean)
    function switch_online()
    function visible_for_map() const
    function visible_for_map(boolean)
    function unregister_member(number)
    function squad_members() const
    function force_change_position(vector)
    function move_offline() const
    function move_offline(boolean)
    function add_location_type(string)
    function npc_count() const
    function on_before_register()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function on_register()
    function on_spawn()
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function can_switch_offline() const
    function can_switch_offline(boolean)
}

class cse_alife_ph_skeleton_object : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_ph_skeleton_object (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_psydog_phantom : cse_alife_monster_base {
    property angle
    property group
    property group_id
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_smart_terrain_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
    property squad
    property team
	
    cse_alife_psydog_phantom (string)
	
    function kill()
    function can_save() const
    function brain(cse_alife_monster_abstract*)
    function can_switch_online() const
    function can_switch_online(boolean)
    function UPDATE_Read(net_packet&)
    function g_squad()
    function switch_offline()
    function clsid() const
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function keep_saved_data_anyway() const
    function on_death(cse_abstract*)
    function on_before_register()
    function use_ai_locations(boolean)
    function switch_online()
    function move_offline() const
    function move_offline(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function on_unregister()
    function alive() const
    function force_set_goodwill(cse_alife_monster_abstract*, number, number)
    function smart_terrain_task_activate(cse_alife_monster_abstract*)
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*)
    function update()
    function current_level_travel_speed(cse_alife_monster_abstract*)
    function current_level_travel_speed(cse_alife_monster_abstract*, number)
    function interactive() const
    function has_detector()
    function travel_speed(cse_alife_monster_abstract*)
    function travel_speed(cse_alife_monster_abstract*, number)
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function used_ai_locations() const
    function on_register()
    function g_team()
    function clear_smart_terrain(cse_alife_monster_abstract*)
    function o_torso(cse_alife_creature_abstract*)
    function STATE_Read(net_packet&, number)
    function health() const
    function smart_terrain_id(cse_alife_monster_abstract*)
    function on_spawn()
    function UPDATE_Write(net_packet&)
    function g_group()
    function rank()
}

class cse_alife_schedulable : ipure_schedulable_object

class cse_alife_smart_zone : cse_alife_space_restrictor,cse_alife_schedulable {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_smart_zone (string)
	
    function detect_probability()
    function on_before_register()
    function smart_touch(cse_alife_monster_abstract*)
    function use_ai_locations(boolean)
    function unregister_npc(cse_alife_monster_abstract*)
    function on_register()
    function update()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function register_npc(cse_alife_monster_abstract*)
    function switch_offline()
    function suitable(cse_alife_monster_abstract*) const
    function switch_online()
    function clsid() const
    function task(cse_alife_monster_abstract*)
    function can_save() const
    function enabled(cse_alife_monster_abstract*) const
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_space_restrictor : cse_alife_dynamic_object,cse_shape {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_space_restrictor (string)
	
    function move_offline() const
    function move_offline(boolean)
    function use_ai_locations(boolean)
    function switch_online()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_before_register()
    function STATE_Write(net_packet&)
    function on_register()
    function init()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function on_spawn()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function can_save() const
}

class cse_alife_team_base_zone : cse_alife_space_restrictor {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_team_base_zone (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_torrid_zone : cse_custom_zone,cse_motion {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_torrid_zone (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function keep_saved_data_anyway() const
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function interactive() const
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function UPDATE_Read(net_packet&)
}

class cse_alife_trader : cse_alife_dynamic_object_visual,cse_alife_trader_abstract {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_alife_trader (string)
	
    function on_before_register()
    function use_ai_locations(boolean)
    function on_register()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function community() const
    function switch_offline()
    function UPDATE_Read(net_packet&)
    function keep_saved_data_anyway() const
    function clsid() const
    function interactive() const
    function can_save() const
    function switch_online()
    function STATE_Write(net_packet&)
    function move_offline() const
    function move_offline(boolean)
    function init()
    function reputation()
    function used_ai_locations() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function profile_name(cse_alife_trader_abstract*)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function on_spawn()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function rank()
}

class cse_alife_trader_abstract {
    function profile_name(cse_alife_trader_abstract*)
    function reputation()
    function rank()
    function community() const
}

class cse_zone_visual : cse_anomalous_zone,cse_visual {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_zone_visual (string)
	
    function move_offline() const
    function move_offline(boolean)
    function use_ai_locations(boolean)
    function can_save() const
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function UPDATE_Read(net_packet&)
    function on_register()
    function STATE_Write(net_packet&)
    function used_ai_locations() const
    function init()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function on_spawn()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function name(const cse_abstract*)
    function STATE_Read(net_packet&, number)
    function interactive() const
    function on_before_register()
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function switch_online()
}

class cse_abstract : cpure_server_object {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function STATE_Write(net_packet&)
    function clsid() const
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
}

class CSE_AbstractVisual : cse_visual,cse_abstract {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    CSE_AbstractVisual (string)
	
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function getStartupAnimation()
    function clsid() const
}

class cse_motion

class cse_ph_skeleton

class cse_shape

class cse_smart_cover : cse_alife_dynamic_object {
    property angle
    property id
    property m_game_vertex_id
    property m_level_vertex_id
    property m_story_id
    property online
    property parent_id
    property position
    property script_version
	
    cse_smart_cover (string)
	
    function move_offline() const
    function move_offline(boolean)
    function description() const
    function use_ai_locations(boolean)
    function switch_online()
    function can_switch_online() const
    function can_switch_online(boolean)
    function visible_for_map() const
    function visible_for_map(boolean)
    function switch_offline()
    function clsid() const
    function set_available_loopholes(object)
    function UPDATE_Read(net_packet&)
    function on_before_register()
    function STATE_Write(net_packet&)
    function on_register()
    function init()
    function can_switch_offline() const
    function can_switch_offline(boolean)
    function name(const cse_abstract*)
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function on_spawn()
    function STATE_Read(net_packet&, number)
    function interactive() const
    function used_ai_locations() const
    function keep_saved_data_anyway() const
    function UPDATE_Write(net_packet&)
    function on_unregister()
    function can_save() const
}

class cse_spectator : cse_abstract {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    cse_spectator (string)
	
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function clsid() const
}

class cse_temporary : cse_abstract {
    property angle
    property id
    property parent_id
    property position
    property script_version
	
    cse_temporary (string)
	
    function STATE_Write(net_packet&)
    function init()
    function spawn_ini(cse_abstract*)
    function section_name(const cse_abstract*)
    function UPDATE_Read(net_packet&)
    function STATE_Read(net_packet&, number)
    function name(const cse_abstract*)
    function UPDATE_Write(net_packet&)
    function clsid() const
}

class cse_visual

class CSavedGameWrapper {
    CSavedGameWrapper (string)
	
    function level_name() const
    function level_id() const
    function game_time(const CSavedGameWrapper*)
    function actor_health() const
}

class CScope : CGameObject {
    CScope ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class cond {
    const act_end = 128
    const anim_end = 4
    const look_end = 2
    const move_end = 1
    const object_end = 32
    const sound_end = 8
    const time_end = 64
	
    cond ()
    cond (number)
    cond (number, double)
}

class anim {
    const attack = 7
    const capture_prepare = 1
    const danger = 0
    const eat = 4
    const free = 1
    const lie_idle = 3
    const look_around = 8
    const panic = 2
    const rest = 6
    const sit_idle = 2
    const sleep = 5
    const stand_idle = 0
    const turn = 9
	
    anim ()
    anim (string)
    anim (string, boolean)
    anim (enum MonsterSpace::EMentalState)
    anim (enum MonsterSpace::EScriptMonsterAnimAction, number)
	
    function completed()
    function type(enum MonsterSpace::EMentalState)
    function anim(string)
}

class object_binder {
    property object
	
    object_binder (game_object*)
	
    function save(net_packet*)
    function update(number)
    function reload(string)
    function net_export(net_packet*)
    function net_save_relevant()
    function load(reader*)
    function net_destroy()
    function reinit()
    function net_Relcase(game_object*)
    function net_spawn(cse_alife_object*)
    function net_import(net_packet*)
}

class effector {
    effector (number, number)
	
    function start(effector*)
    function process(effector_params*)
    function finish(effector*)
}

class entity_action {
    entity_action ()
    entity_action (const entity_action*)
	
    function set_action(move&)
    function set_action(look&)
    function set_action(anim&)
    function set_action(sound&)
    function set_action(particle&)
    function set_action(object&)
    function set_action(cond&)
    function set_action(act&)
    function move() const
    function particle() const
    function completed()
    function object() const
    function all()
    function time()
    function look() const
    function sound() const
    function anim() const
}

class game_object {
    const action_type_count = 6
    const alifeMovementTypeMask = 0
    const alifeMovementTypeRandom = 1
    const animation = 2
    const dialog_pda_msg = 0
    const dummy = -1
    const enemy = 2
    const friend = 0
    const game_path = 0
    const info_pda_msg = 1
    const level_path = 1
    const movement = 0
    const neutral = 1
    const no_path = 3
    const no_pda_msg = 2
    const object = 5
    const particle = 4
    const patrol_path = 2
    const relation_attack = 1
    const relation_fight_help_human = 2
    const relation_fight_help_monster = 4
    const relation_kill = 0
    const sound = 3
    const watch = 1
	
    property bleeding
    property health
    property morale
    property power
    property psy_health
    property radiation
	
-- All types
	function id() const
    function position() const
    function level_vertex_id() const
    function game_vertex_id() const
    function section() const
    function name() const
    function clsid() const
	function parent() const
    function has_info(string)
    function dont_has_info(string)
    function give_info_portion(string)
    function disable_info_portion(string)
	
-- Testing
	function is_entity_alive()
	function is_inventory_item()
	function is_inventory_owner()
	function is_actor()
	function is_custom_monster()
	function is_weapon()
	function is_outfit()
	function is_scope()
	function is_silencer()
	function is_grenade_launcher()
	function is_weapon_magazined()
	function is_space_restrictor()
	function is_stalker()
	function is_anomaly()
	function is_monster()
	function is_trader()
	function is_hud_item()
	function is_artefact()
	function is_ammo()
	function is_weapon_gl()
	function is_inventory_box()

-- Player
	function get_actor_max_weight()
	function set_actor_max_weight(number)
	function get_actor_max_walk_weight()
	function set_actor_max_walk_weight(number)
	function get_actor_jump_speed()
	function set_actor_jump_speed(number)
	function get_actor_sprint_koef()
	function set_actor_sprint_koef(number)
	function get_actor_run_coef()
	function set_actor_run_coef(number)
	function get_actor_runback_coef()
	function set_actor_runback_coef(number)
	
-- NPCs
    function rank()
    function relation(game_object*)
	function goodwill(game_object*)
    function sympathy()
    function set_relation(enum ALife::ERelationType, game_object*)
    function set_community_goodwill(string, number)
    function set_sympathy(number)
	function general_goodwill(game_object*)
    function change_goodwill(number, game_object*)
    function force_set_goodwill(number, game_object*)
    function set_goodwill(number, game_object*)
    function see(const game_object*)
    function see(string)
    function max_health() const
    function alive() const
    function wounded() const
    function wounded(boolean)
    function critically_wounded()
    function kill(game_object*)
    function best_danger()
    function best_enemy()
    function get_enemy() const
    function set_enemy(game_object*)
    function mental_state() const
    function set_enemy_callback()
    function set_enemy_callback(const function<boolean>&)
    function set_enemy_callback(const function<boolean>&, object)
	function can_be_harmed() -- returns bool
	function set_can_be_harmed(boolean)
-- Human objects
    function character_name() -- some of these can be used for server objects as well
    function character_icon()
    function character_rank()
    function character_reputation()
    function character_community()
    function set_character_rank(number)
    function set_character_community(string, number, number)
	function set_character_icon(string)
    function change_character_reputation(number)
    function set_active_task(CGameTask*)
    function give_task(CGameTask*, number, boolean, number)
    function get_task_state(string)
    function get_task(string, boolean)
    function change_bleeding(number)
    function change_health(number)
    function change_morale(number)
    function change_power(number)
    function change_psy_health(number)
    function change_radiation(number)
	function get_total_weight()
    function memory_time(const game_object&)
    function max_ignore_monster_distance(const number&)
    function max_ignore_monster_distance() const
    function money()
    function give_money(number)
    function transfer_money(number, game_object*)
    function enable_talk()
    function is_talk_enabled()
    function disable_talk()
    function switch_to_talk()
    function stop_talk()
    function allow_break_talk_dialog(boolean)
    function is_talking()
    function can_throw_grenades() const
    function can_throw_grenades(boolean)
	-- items
    function active_slot()
    function active_item()
    function active_detector() const
	function show_detector()
	function hide_detector()
	function force_hide_detector() --  useful for item animations and grenade quickthrow 
    function activate_slot(number)
    function item_in_slot(number)
	function item_on_belt(number)
	function is_on_belt(game_object*)
	function belt_count() const
	function move_to_ruck(game_object*)
	function move_to_slot(game_object*, number)
	function move_to_belt(game_object*)
    function eat(game_object*)
    function best_item()
    function best_weapon()
    function get_artefact()
    function drop_item(game_object*)
    function drop_item_and_teleport(game_object*, vector)
    function make_item_active(game_object*) -- force to slot.
    function take_items_enabled(boolean)
    function take_items_enabled() const
    function is_there_items_to_pickup() const
    function mark_item_dropped(game_object*)
	function get_inv_weight() const
	function get_inv_max_weight() const
    function can_select_weapon() const
    function can_select_weapon(boolean)
    function weapon_strapped() const
    function weapon_unstrapped() const
	function reload_weapon() -- for db.actor only, must comes after unload magazine cause it doesn't work with full mag
    function hide_weapon()
	function get_current_outfit() const
	function get_current_outfit_protection(number)
	function set_item(enum MonsterSpace::EObjectAction)
    function set_item(enum MonsterSpace::EObjectAction, game_object*)
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number)
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number, number)
    function iterate_inventory(function<void>, object)
	function iterate_ruck(function<void>, object)
	function iterate_belt(function<void>, object)
    function inventory_for_each(const function<void>&)
    function transfer_item(game_object*, game_object*)
    function is_trade_enabled()
    function switch_to_trade()
    function enable_trade()
    function disable_trade()
    function buy_condition(number, number)
    function sell_condition(number, number)
    function item_allow_trade(game_object*)
    function item_deny_trade(game_object*)
    function set_trader_global_anim(string)
	-- Trade profiles
    function buy_supplies(ini_file*, string)
    function buy_item_condition_factor(number)
	function buy_condition(ini_file*, string)
	function sell_condition(ini_file*, string)
	function buy_item_exponent(number)
	function sell_item_exponent(number)
    function add_animation(string, boolean, boolean)
    function add_animation(string, boolean, vector, vector, boolean)
    function get_script() const
    function enable_night_vision(boolean)
    function sound_voice_prefix() const
    function use_smart_covers_only() const
    function use_smart_covers_only(boolean)
    function external_sound_start(string)
    function get_dest_smart_cover_name()
    function memory_visible_objects() const
    function who_hit_name()
    function lookout_max_time(number)
    function lookout_max_time() const
    function in_current_loophole_fov(vector) const
    function clear_animations()
    function set_smart_cover_target_default(boolean)
    function get_physics_object()
    function idle_max_time(number)
    function idle_max_time() const
    function base_out_restrictions()
    function iterate_inventory_box(function<void>, object)
    function set_smart_cover_target_selector(function<void>)
    function set_smart_cover_target_selector(function<void>, object)
    function set_smart_cover_target_selector()
    function debug_planner(const action_planner*)
    function who_hit_section_name()
    function set_previous_point(number)
    function set_smart_cover_target_fire()
    function team() const
    function get_smart_cover_description() const
    function active_zone_contact(number)
    function set_smart_cover_target_lookout()
    function action_count() const
    function set_dest_smart_cover(string)
    function set_dest_smart_cover()
    function get_dest_smart_cover()
    function restore_sound_threshold()
    function object_count() const
    function animation_slot() const
    function get_current_direction()
    function action() const
    function give_talk_message(string, string, string)
    function not_yet_visible_objects() const
    function set_mental_state(enum MonsterSpace::EMentalState)
    function squad() const
    function reset_action_queue()
    function burer_set_force_gravi_attack(boolean)
    function set_actor_direction(number)
    function add_restrictions(string, string)
    function get_monster_hit_info()
    function memory_hit_objects() const
    function bind_object(object_binder*)
    function get_bone_id(string) const
    function binded_object()
    function path_completed() const
    function release_stand_sleep_animation()
    function set_fastcall(const function<boolean>&, object)
    function set_smart_cover_target(vector)
    function set_smart_cover_target(game_object*)
    function set_smart_cover_target()
    function set_start_point(number)
    function set_fov(number)
    function set_path_type(enum MovementManager::EPathType)
    function restore_max_ignore_monster_distance()
    function set_collision_off(boolean)
    function enable_memory_object(game_object*, boolean)
    function lookout_min_time(number)
    function lookout_min_time() const
    function animation_count() const
    function disable_inv_upgrade()
    function memory_sound_objects() const
    function get_hanging_lamp()
    function get_force_anti_aim()
    function enable_inv_upgrade()
    function set_smart_cover_target_idle()
    function invulnerable() const
    function invulnerable(boolean)
    function movement_type() const
    function explode(number)
    function remove_home()
    function set_dest_level_vertex_id(number)
    function deadbody_closed(boolean)
    function register_door_for_npc()
    function get_script_name() const
    function spawn_ini() const
    function get_campfire()
    function get_movement_speed() const
    function set_body_state(enum MonsterSpace::EBodyState)
    function in_loophole_fov(string, string, vector) const
    function set_invisible(boolean)
    function in_smart_cover() const
    function play_sound(number)
    function play_sound(number, number)
    function play_sound(number, number, number)
    function play_sound(number, number, number, number)
    function play_sound(number, number, number, number, number)
    function play_sound(number, number, number, number, number, number)
    function get_visual_name() const
    function set_movement_selection_type(enum ESelectionType)
    function disable_anomaly()
    function motivation_action_manager(game_object*)
    function bone_position(string) const
    function object(string)
    function object(number)
	function object_id(number) -- get game object of specified ID that belongs to an owner, return 0 if not found?
    function fov() const
    function set_default_panic_threshold()
    function set_actor_relation_flags(flags32)
    function lock_door_for_npc()
    function is_body_turning() const
    function set_dest_game_vertex_id(number)
    function marked_dropped(game_object*)
    function patrol_path_make_inactual()
    function fake_death_stand_up()
    function remove_sound(number)
    function set_detail_path_type(enum DetailPathManager::EDetailPathType)
    function extrapolate_length() const
    function extrapolate_length(number)
    function death_sound_enabled(boolean)
    function death_sound_enabled() const
    function play_cycle(string)
    function play_cycle(string, boolean)
    function set_capture_anim(game_object*, string, const vector&, number)
    function patrol()
    function story_id() const
    function in_restrictions()
    function unlock_door_for_npc()
    function visibility_threshold() const
    function sniper_update_rate(boolean)
    function sniper_update_rate() const
    function get_current_point_index()
    function stop_particles(string, string)
    function set_alien_control(boolean)
    function inv_box_can_take(boolean)
    function set_patrol_path(string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean)
    function allow_sprint(boolean)
    function special_danger_move(boolean)
    function special_danger_move()
    function is_level_changer_enabled()
    function enable_level_changer(boolean)
    function actor_look_at_point(vector)
    function set_const_force(const vector&, number, number)
    function aim_bone_id(string)
    function aim_bone_id() const
    function restore_default_start_dialog()
    function change_team(number, number, number)
    function set_trader_sound(string, string)
    function aim_time(game_object*, number)
    function aim_time(game_object*)
    function direction() const
    function body_state() const
    function skip_transfer_enemy(boolean)
    function idle_min_time(number)
    function idle_min_time() const
    function info_add(string)
    function sight_params()
    function set_sight(enum SightManager::ESightType, vector*, number)
    function set_sight(enum SightManager::ESightType, boolean, boolean)
    function set_sight(enum SightManager::ESightType, vector&, boolean)
    function set_sight(enum SightManager::ESightType, vector*)
    function set_sight(game_object*)
    function set_sight(game_object*, boolean)
    function set_sight(game_object*, boolean, boolean)
    function set_sight(game_object*, boolean, boolean, boolean)
    function set_visual_memory_enabled(boolean)
    function remove_restrictions(string, string)
    function get_holder_class()
    function disable_hit_marks(boolean)
    function disable_hit_marks() const
    function location_on_path(number, vector*)
    function sound_prefix() const
    function sound_prefix(string)
    function set_task_state(enum ETaskState, string)
    function show_condition(ini_file*, string)
    function add_sound(string, number, enum ESoundTypes, number, number, number)
    function add_sound(string, number, enum ESoundTypes, number, number, number, string)
    function restore_ignore_monster_threshold()
    function set_queue_size(number)
    function make_object_visible_somewhen(game_object*)
    function jump(const vector&, number)
    function restore_weapon()
    function inv_box_can_take_status()
    function force_visibility_state(number)
    function night_vision_enabled() const
    function start_particles(string, string)
    function enable_vision(boolean)
    function vertex_in_direction(number, vector, number) const
    function set_dest_loophole(string)
    function set_dest_loophole()
    function detail_path_type() const
    function group_throw_time_interval() const
    function group_throw_time_interval(number)
    function is_inv_box_empty()
    function target_body_state() const
    function info_clear()
    function head_orientation() const
    function inside(const vector&, number) const
    function inside(const vector&) const
    function set_nonscript_usable(boolean)
    function set_tip_text_default()
    function set_tip_text(string)
    function get_current_holder()
    function get_physics_shell() const
    function set_actor_position(vector)
    function unregister_in_combat()
    function remove_all_restrictions()
    function get_car()
    function in_current_loophole_range(vector) const
    function mass() const
    function active_sound_count()
    function active_sound_count(boolean)
    function get_anomaly_power()
    function enable_anomaly()
    function get_actor_relation_flags() const
    function set_sound_mask(number)
    function community_goodwill(string)
    function vision_enabled() const
    function is_door_locked_for_npc() const
    function fake_death_fall_down()
    function ignore_monster_threshold(number)
    function ignore_monster_threshold() const
    function target_movement_type() const
    function attachable_item_enabled() const
    function sniper_fire_mode(boolean)
    function sniper_fire_mode() const
    function set_smart_cover_target_fire_no_lookout()
    function on_door_is_open()
    function profile_name()
    function get_start_dialog()
    function set_start_dialog(string)
    function set_level_changer_invitation(string)
    function run_talk_dialog(game_object*, boolean)
    function set_custom_panic_threshold(number)
    function deadbody_can_take_status()
    function switch_to_upgrade()
    function on_door_is_closed()
    function apply_loophole_direction_distance(number)
    function apply_loophole_direction_distance() const
    function out_restrictions()
    function enable_attachable_item(boolean)
    function disable_show_hide_sounds(boolean)
    function is_inv_upgrade_enabled()
    function set_home(string, number, number, boolean, number)
    function set_home(number, number, number, boolean, number)
    function poltergeist_get_actor_ignore()
    function burer_get_force_gravi_attack()
    function inv_box_closed(boolean, string)
    function set_callback(enum GameObject::ECallbackType, const function<void>&)
    function set_callback(enum GameObject::ECallbackType, const function<void>&, object)
    function set_callback(enum GameObject::ECallbackType)
    function get_corpse() const
    function get_enemy_strength() const
    function path_type() const
    function range() const
    function set_anomaly_power(number)
    function deadbody_can_take(boolean)
    function give_talk_message2(string, string, string, string)
    function set_vis_state(number)
    function give_game_news(string, string, string, number, number)
    function give_game_news(string, string, string, number, number, number)
    function death_time() const
    function get_visibility_state()
    function center()
    function best_cover(const vector&, const vector&, number, number, number)
    function accuracy() const
    function set_desired_position()
    function set_desired_position(const vector*)
    function poltergeist_set_actor_ignore(boolean)
    function accessible(const vector&)
    function accessible(number)
    function suitable_smart_cover(game_object*)
    function deadbody_closed_status()
    function set_patrol_extrapolate_callback()
    function set_patrol_extrapolate_callback(const function<boolean>&)
    function set_patrol_extrapolate_callback(const function<boolean>&, object)
    function set_range(number)
    function attachable_item_load_attach(string)
    function in_loophole_range(string, string, vector) const
    function set_force_anti_aim(boolean)
    function force_stand_sleep_animation(number)
    function add_combat_sound(string, number, enum ESoundTypes, number, number, number, string)
    function command(const entity_action*, boolean)
    function hit(hit*)
    function movement_enabled(boolean)
    function movement_enabled()
    function berserk()
    function accessible_nearest(const vector&, vector&)
    function set_movement_type(enum MonsterSpace::EMovementType)
    function group() const
    function script(boolean, string)
    function safe_cover(const vector&, number, number)
    function can_script_capture() const
    function base_in_restrictions()
    function set_trader_head_anim(string)
    function unregister_door_for_npc()
    function set_npc_position(vector)
    function movement_target_reached()
    function set_desired_direction()
    function set_desired_direction(const vector*)
    function get_helicopter()
    function get_sound_info()
    function find_best_cover(vector)
    function register_in_combat()
    function set_sound_threshold(number)
    function memory_position(const game_object&)
    function set_visual_name(string)
    function external_sound_stop()
    function inv_box_closed_status()
    function target_mental_state() const
    function set_manual_invisibility(boolean)
    function action_by_index(number)
	
-- Anomalies objects
	function get_anomaly_radius()
	function set_anomaly_radius(number)
	function set_anomaly_position(number, number, number) -- x,y,z
	
-- Item objects
    function condition() const
    function set_condition(number)
	function weight() const
	function set_weight(number)
    function cost() const
	-- Weapons/Outfits
	function install_upgrade(string)
	function has_upgrade(string)
	function iterate_installed_upgrades(function<void>) -- function (string, game_object*) - return true to stop iterating
	-- Outfits
	function get_additional_max_weight()
	function set_additional_max_weight(number)
	function get_additional_max_walk_weight()
	function set_additional_max_walk_weight(number)
	-- Weapons
	function get_main_weapon_type() const
	function set_main_weapon_type(number)
	function get_weapon_type() const
	function set_weapon_type(number)
	function get_ammo_total() const
	function get_ammo_in_magazine() const
	function set_ammo_elapsed(number)
	function unload_magazine(boolean) -- (true) to retrieve ammo, otherwise ammo vanish
	function force_unload_magazine(boolean) -- (true) to retrieve ammo, otherwise ammo vanish (also works when weapon is jammed)
	function get_ammo_type()
	function set_ammo_type(number)
	function has_ammo_type(number)
	function get_state() const
	function weapon_in_grenade_mode()
	function get_weapon_substate() const
	function switch_state(number)
    function weapon_is_scope()
    function weapon_scope_status()
    function weapon_silencer_status()
    function weapon_grenadelauncher_status()
    function weapon_is_silencer()
    function weapon_is_grenadelauncher()
	function weapon_addon_attach(game_object*)
	function weapon_addon_detach(string)
	function set_queue_size(number)
	-- Ammo
	function ammo_get_count() const
	function ammo_set_count(number)
	function ammo_box_size() const
	-- Multiuse items
	function get_max_uses() const
	function get_remaining_uses() const
	function set_remaining_uses(number)
	-- Devices
	function power_critical() const
	-- PDA
	function set_psy_factor(number)-- [0-1]
	function psy_factor() const
	-- Torch
	function enable_torch(boolean)
    function torch_enabled() const
	
-- Class casting. obj:cast_CustomOutfit() allows you to access CCustomOutfit class methods if the object is an outfit
	-- All classes and their methods are listed in this file
	function cast_Actor()
	function cast_Car()
	function cast_Heli()
	function cast_InventoryOwner()
	function cast_InventoryBox()
	function cast_CustomZone()
	function cast_TorridZone()
	function cast_MosquitoBald()
	function cast_ZoneCampfire()
	function cast_InventoryItem()
	function cast_CustomOutfit()
	function cast_Helmet()
	function cast_Artefact()
	function cast_Ammo()
	function cast_Weapon()
	function cast_WeaponMagazined()
	function cast_WeaponMagazinedWGrenade()
	function cast_EatableItem()
	function cast_Medkit()
	function cast_Antirad()
	function cast_FoodItem()
	function cast_BottleItem()
}

class hit {
    const burn = 0
    const chemical_burn = 2
    const dummy = 12
    const explosion = 7
    const fire_wound = 8
    const light_burn = 11
    const radiation = 3
    const shock = 1
    const strike = 5
    const telepatic = 4
    const wound = 6
	
    property direction
    property draftsman
    property impulse
    property power
    property type
	
    hit ()
    hit (const hit*)
	
    function bone(string)
}

class ini_file {
    ini_file (string)
	
    function line_count(string)
    function r_bool(string, string)
    function section_exist(string)
    function r_float(string, string)
    function r_clsid(string, string)
    function r_s32(string, string)
    function r_line(ini_file*, string, number, string&, string&)
    function r_token(string, string, const token_list&)
    function r_vector(string, string)
    function r_u32(string, string)
    function r_string_wq(string, string)
    function r_string(string, string)
    function line_exist(string, string)
}

class act {
    const attack = 2
    const eat = 1
    const panic = 3
    const rest = 0
	
    act ()
    act (enum MonsterSpace::EScriptMonsterGlobalAction)
    act (enum MonsterSpace::EScriptMonsterGlobalAction, game_object*)
}

class MonsterHitInfo {
    property direction
    property time
    property who
}

class move {
    const back = 4
    const criteria = 2
    const crouch = 0
    const curve = 0
    const curve_criteria = 2
    const default = 0
    const dodge = 1
    const down = 64
    const drag = 3
    const force = 1
    const fwd = 2
    const handbrake = 128
    const jump = 4
    const left = 8
    const line = 0
    const none = 1
    const off = 512
    const on = 256
    const right = 16
    const run = 1
    const run_fwd = 2
    const run_with_leader = 7
    const stand = 2
    const standing = 1
    const steal = 5
    const up = 32
    const walk = 0
    const walk_bkwd = 1
    const walk_fwd = 0
    const walk_with_leader = 6
	
    move ()
    move (enum CScriptMovementAction::EInputKeys)
    move (enum CScriptMovementAction::EInputKeys, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, patrol*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, patrol*, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, vector*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, vector*, number)
    move (vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
	
    function completed()
    function path(enum DetailPathManager::EDetailPathType)
    function move(enum MonsterSpace::EMovementType)
    function position(const vector&)
    function input(enum CScriptMovementAction::EInputKeys)
    function patrol(const class CPatrolPath*, class shared_str)
    function object(game_object*)
    function body(enum MonsterSpace::EBodyState)
}

class CUIFrameWindow : CUIWindow {
    CUIFrameWindow ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetHeight(number)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function SetColor(number)
    function GetWidth() const
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function SetWidth(number)
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}